{"version":3,"file":"static/js/736.6aaed4b9.chunk.js","mappings":"8QAGaA,EAAgBC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4BAI1BC,EAAcH,EAAAA,GAAAA,EAAQI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,8CAKtBG,EAAWL,EAAAA,GAAAA,GAASM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,wJAQpBK,EAAWP,EAAAA,GAAAA,GAASQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,6WAapBO,EAAeT,EAAAA,GAAAA,IAAUU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,uFAOzBS,EAAYX,EAAAA,GAAAA,GAASY,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,2FAMrBW,EAAqBb,EAAAA,GAAAA,EAAQc,IAAAA,GAAAZ,EAAAA,EAAAA,GAAA,iIAS7Ba,EAAaf,EAAAA,GAAAA,IAAUgB,IAAAA,GAAAd,EAAAA,EAAAA,GAAA,gC,SCWpC,EApDa,WACX,IAAQe,GAAOC,EAAAA,EAAAA,MAAPD,GACRE,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAiB9B,OAfAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEA,OAFAF,EAAAC,KAAA,EAEnBT,GAAa,GAAMQ,EAAAE,KAAA,GACDC,EAAAA,EAAAA,IAAatB,GAAI,KAAD,EAA5BkB,EAAGC,EAAAI,KACThB,EAAQW,GAAKC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAEbM,QAAQC,IAAIP,EAAAK,GAAMG,SAAS,QAEP,OAFOR,EAAAC,KAAA,GAE3BT,GAAa,GAAOQ,EAAAS,OAAA,6BAAAT,EAAAU,OAAA,GAAAZ,EAAA,wBAEvB,kBAVmB,OAAAH,EAAAgB,MAAA,KAAAC,UAAA,KAWpBlB,GACF,GAAG,CAACb,KAGFgC,EAAAA,EAAAA,MAAClD,EAAa,CAAAmD,SAAA,CACXvB,IAAawB,EAAAA,EAAAA,KAAChD,EAAW,CAAA+C,SAAC,gBAC3BC,EAAAA,EAAAA,KAAC9C,EAAQ,CAAA6C,SACU,IAAhB3B,EAAK6B,OACJ7B,EAAK8B,KAAI,SAAAC,GAAK,OACZL,EAAAA,EAAAA,MAAC1C,EAAQ,CAAA2C,SAAA,EACPD,EAAAA,EAAAA,MAACxC,EAAY,CAAAyC,SAAA,EACXC,EAAAA,EAAAA,KAACxC,EAAS,CAAAuC,SAAEI,EAAMC,OACjBD,EAAME,YACLP,EAAAA,EAAAA,MAACpC,EAAkB,CAAAqC,SAAA,EACjBC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,eAAiB,IAAEI,EAAME,gBAIpCF,EAAMG,eACLN,EAAAA,EAAAA,KAACpC,EAAU,CACT2C,IAAG,mCAAAC,OAAqCL,EAAMG,cAC9CG,IAAKN,EAAMC,KACXM,MAAM,UAbGP,EAAMQ,QAgBV,KAGbX,EAAAA,EAAAA,KAAA,KAAAD,SAAG,+CAKb,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\n// Styled components\nexport const CastContainer = styled.div`\n  padding: 20px;\n`;\n\nexport const LoadingText = styled.p`\n  font-size: 18px;\n  color: grey;\n`;\n\nexport const CastList = styled.ul`\n  padding-top: 10px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 20px;\n  align-items: center;\n`;\n\nexport const CastItem = styled.li`\n  border-radius: 8px;\n  height: 460px;\n  box-shadow: rgba(2, 92, 122, 0.25) 0px 54px 55px,\n    rgba(2, 92, 122, 0.12) 0px -12px 30px, rgba(2, 92, 122, 0.12) 0px 4px 6px,\n    rgba(2, 92, 122, 0.17) 0px 12px 13px, rgba(2, 92, 122, 0.09) 0px -3px 5px;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n`;\n\nexport const ActorDetails = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  height: 100px;\n`;\n\nexport const ActorName = styled.h2`\n  font-style: oblique;\n  color: rgb(2, 92, 122);\n  text-transform: uppercase;\n`;\n\nexport const CharacterParagraph = styled.p`\n  font-weight: 500;\n  align-self: flex-start;\n  span {\n    font-weight: bold;\n    text-transform: uppercase;\n  }\n`;\n\nexport const ActorImage = styled.img`\n  border-radius: 10;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'routes/movies';\nimport {\n  CastContainer,\n  LoadingText,\n  CastList,\n  CastItem,\n  ActorDetails,\n  ActorName,\n  CharacterParagraph,\n  ActorImage,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const { id } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const getCastFromApi = async () => {\n      try {\n        setIsLoading(true);\n        const res = await getMovieCast(id);\n        setCast(res);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getCastFromApi();\n  }, [id]);\n\n  return (\n    <CastContainer>\n      {isLoading && <LoadingText>Loading...</LoadingText>}\n      <CastList>\n        {cast.length !== 0 ? (\n          cast.map(actor => (\n            <CastItem key={actor.cast_id}>\n              <ActorDetails>\n                <ActorName>{actor.name}</ActorName>\n                {actor.character && (\n                  <CharacterParagraph>\n                    <span>Character:</span> {actor.character}\n                  </CharacterParagraph>\n                )}\n              </ActorDetails>\n              {actor.profile_path && (\n                <ActorImage\n                  src={`https://image.tmdb.org/t/p/w500/${actor.profile_path}`}\n                  alt={actor.name}\n                  width=\"200\"\n                />\n              )}\n            </CastItem>\n          ))\n        ) : (\n          <p>We don't have any cast for this movie.</p>\n        )}\n      </CastList>\n    </CastContainer>\n  );\n};\n\nexport default Cast;\n"],"names":["CastContainer","styled","_templateObject","_taggedTemplateLiteral","LoadingText","_templateObject2","CastList","_templateObject3","CastItem","_templateObject4","ActorDetails","_templateObject5","ActorName","_templateObject6","CharacterParagraph","_templateObject7","ActorImage","_templateObject8","id","useParams","_useState","useState","_useState2","_slicedToArray","cast","setCast","_useState3","_useState4","isLoading","setIsLoading","useEffect","getCastFromApi","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","res","_context","prev","next","getMovieCast","sent","t0","console","log","message","finish","stop","apply","arguments","_jsxs","children","_jsx","length","map","actor","name","character","profile_path","src","concat","alt","width","cast_id"],"sourceRoot":""}